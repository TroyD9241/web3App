{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","wave","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","waveTxn","hash","wait","useEffect","className","onClick","ReactDOM","render","document","getElementById"],"mappings":"0lOAiHeA,EA5GH,WACV,MAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAKMC,EAAcC,EAAIA,IAElBC,EAAwB,uCAAG,kCAAAC,EAAA,oEAERC,OAAbC,EAFqB,EAErBA,SAFqB,uBAK3BC,QAAQC,IAAI,gCALe,0BAQ3BD,QAAQC,IAAI,8BAA+BF,GARhB,wBAWNA,EAASG,QAAQ,CAAEC,OAAQ,iBAXrB,QAaL,KAFlBC,EAXuB,QAahBC,QACLC,EAAUF,EAAS,GACzBJ,QAAQC,IAAI,+BAAgCK,GAC5Cb,EAAkBa,IAElBN,QAAQC,IAAI,+BAlBe,kDAqB7BD,QAAQC,IAAR,MArB6B,0DAAH,qDAyBxBM,EAAa,uCAAG,gCAAAV,EAAA,oEAEGC,OAAbC,EAFU,EAEVA,SAFU,uBAKhBS,MAAM,iBALU,0CASKT,EAASG,QAAQ,CAAEC,OAAQ,wBAThC,OASZC,EATY,OAWlBJ,QAAQC,IAAI,YAAaG,EAAS,IAClCX,EAAkBW,EAAS,IAZT,kDAclBJ,QAAQC,IAAR,MAdkB,0DAAH,qDAkBbQ,EAAI,uCAAG,wCAAAZ,EAAA,oEAEYC,SAAbC,EAFC,EAEDA,UAFC,wBAKDW,EAAW,IAAIC,IAAOC,UAAUC,aAAad,GAC7Ce,EAASJ,EAASK,YAClBC,EAAqB,IAAIL,IAAOM,SArDpB,6CAqD8CvB,EAAaoB,GAPtE,SASWE,EAAmBE,gBAT9B,cASHC,EATG,OAUPnB,QAAQC,IAAI,gCAAiCkB,EAAMC,YAV5C,UAYeJ,EAAmBP,OAZlC,eAYDY,EAZC,OAaPrB,QAAQC,IAAI,YAAaoB,EAAQC,MAb1B,UAeDD,EAAQE,OAfP,eAgBPvB,QAAQC,IAAI,YAAaoB,EAAQC,MAhB1B,UAkBON,EAAmBE,gBAlB1B,QAkBPC,EAlBO,OAmBPnB,QAAQC,IAAI,gCAAiCkB,EAAMC,YAnB5C,wBAqBPpB,QAAQC,IAAI,kCArBL,0DAwBTD,QAAQC,IAAR,MAxBS,0DAAH,qDAgCV,OAJAuB,qBAAU,WACR5B,MACC,IAGD,yBAAK6B,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UAAf,4CAIA,yBAAKA,UAAU,OAAf,2EAIA,4BAAQA,UAAU,aAAaC,QAASjB,GAAxC,iBAIEjB,GACA,4BAAQiC,UAAU,aAAaC,QAASnB,GAAxC,qBCnGVoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.da567fb5.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from './utils/WavePortal.json';\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  /**\n   * Create a varaible here that holds the contract address after you deploy!\n   */\n  const contractAddress = \"0x515b97294c67FD78831a42fF3d5E34dD948C54A3\";\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        let count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n\n        const waveTxn = await wavePortalContract.wave();\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n\n        count = await wavePortalContract.getTotalWaves();\n        console.log(\"Retrieved total wave count...\", count.toNumber());\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">\n          ðŸ‘‹ Hey there! My name is Troy!\n        </div>\n\n        <div className=\"bio\">\n          I'll be updating this site some more over the next week as I learn Web3\n        </div>\n\n        <button className=\"waveButton\" onClick={wave}>\n          gimme a boop\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}